# -*- coding: utf-8 -*-
"""modellingTranscal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C5j7pfjLfu7kErEva_7Phv4HBmQ8AT-P
"""

from cProfile import label
import datetime
import numpy as np
import pandas as pd
import math
import matplotlib.pyplot as plt
from sympy import symbols, Eq,solve
from sympy import Symbol, nsolve

#PARÂMETROS INICIAIS  
# Página 20
Tamb = 294.25 #Temperatura ambiente

# Página 75-77
P_3 = 354.420*1000        #[SI] [Pa]- GASTURB - Página 75
T_3 = 498.420         #[SI] [K]- GASTURB - Página 75
T31 = 498.42 #Temperatura do ar na entrada da câmara de combustão  
phi_global = 0.237 #razão de equivalência global

#Aproximação linear da temperatra de admisão (T_3) pela razão estequiométrica - páginas 50 à 54
razao_equi = np.linspace(0,3,300)             #razão de equivalência
T3_pobre = (-razao_equi + 0.70547)/0.00046    #Temperaura na região pobre
T3_rica = (razao_equi - 1.46695)/0.00172      #Temperaura na região rica

plt.figure(1,figsize=(12, 7), dpi=80)
plt.plot(razao_equi, T3_pobre, 'r')
plt.plot(razao_equi, T3_rica, 'k')
plt.xlim(0,3)
plt.ylim(-1000, 1800)
#plt.show()

# TEMPERATURA VS RAZÃO DE EQUIVALÊNCIA
razao_equi_esteq = 0.06818  #razão de equivalencia estequiométrica para JET-A1
limite_pobre = 0.45         #limite razão mistura pobre
limite_rica = 2.553         #limite razão mistura rica

# Razão de equivalêcia para uma dada temperatura
def razao_mistura_pobre(T):
	return 0.70547 - 0.00046*T

def razao_mistura_rica(T):
	return 1.46695 + 0.00172*T

print(razao_mistura_pobre(T31))
print(razao_mistura_rica(T31))

# Fluxo de Ar na Zona Primária
phi_zp_max = 1.5                        #razão de equivalência maxima na zona primária (literatura)
limite_min = phi_global/phi_zp_max       #limite mínimo para mzp/m3
razao_rico = phi_global/razao_mistura_pobre(T31) 
razao_pobre =phi_global/razao_mistura_rica(T31) 
ar_admitido_zp = 0.19         #porcentagem de ar a ser designada à zona primária (escolhe um valor que atenda as condições de operação)
phi_zp = phi_global/ar_admitido_zp  #razão de equivalência da zona primária

print("mzp_min/m3 = ", limite_min)
print("mzp_rico/m3 = ",razao_rico )
print("mzp_pobre/m3 = ",razao_pobre )
print("phi_zp = ",phi_zp)

# DEFINIÇÃO DA ÁREA DE REFERÊNCIA - Seguindo o telegram
k = 143.5                        #[SI] [J/KG.K] - página 50
P_3 = 354.420*1000               #[SI] [Pa]- GASTURB - Página 75
T_3 = 498.420                    #[SI] [K]- GASTURB - Página 75
theta = 73000000                 #[SI] [] - página 50
fluxo_massa_3 = 0.243            #[SI] [kg/s]- GASTURB - Página 75
perda_pressao_global = 0.06      #Tabela 5 - página 54  
fator_perda_pressao = 20         #Tablea 5 - página 54
D_int = 0.024

phi_zp = 1.05 #Estava phi = 1.4 antes

def b(phi_zp):
	if phi_zp >= 0.6 and phi_zp <= 1:
		return 245*(1.39 + np.log(phi_zp)) 
	if phi_zp > 1 and phi_zp <= 1.4:
		return 170*(2.00 + np.log(phi_zp)) 

#PARTE 1 CALCULO DE Aref e Dref

A_ref_aero = (k*(fator_perda_pressao/perda_pressao_global)*(((fluxo_massa_3 * (T_3)**0.5)/P_3)**2))**0.5
D_ref_aero = 0.5*((((4*A_ref_aero) + (D_int**2 * np.pi))/np.pi)**0.5 - D_int)

A_ref_quim = (theta*fluxo_massa_3)/(P_3**1.75 *(D_ref_aero**0.75)*np.exp(T_3/b(phi_zp)))
D_ref_quim = 0.5*((((4*A_ref_quim) + (D_int**2 * np.pi))/np.pi)**0.5 - D_int)

def calculaArefquim(dref):
	return (theta*fluxo_massa_3)/(P_3**1.75 *(dref**0.75)*np.exp(T_3/b(phi_zp)))

def calculaDrefquim(aref):
	return 0.5*((((4*aref) + (D_int**2 * np.pi))/np.pi)**0.5 - D_int)

arefQuimAnterior = calculaArefquim(D_ref_quim)
drefQuimAnterior = calculaDrefquim(arefQuimAnterior)

arefQuimAtual = calculaArefquim(drefQuimAnterior)
dRefQuimAtual = calculaDrefquim(arefQuimAtual)

#Calculo Iterativo do Aref
while math.pow(arefQuimAtual-arefQuimAnterior,2) > 1e-15:
	arefQuimAnterior = arefQuimAtual
	arefQuimAtual = calculaArefquim(dRefQuimAtual)
	dRefQuimAtual = calculaDrefquim(arefQuimAtual)
	
#Aref_caio = 0.00759996
#Aref_encontrado = 0.0088248
#Comparação do Aref Aerodinamico com o Aref quimico
if arefQuimAtual>A_ref_aero:
	aref = arefQuimAtual
	dref = dRefQuimAtual
else:
	aref = A_ref_aero
	dref = D_ref_aero

#PARTE 2 DETERMINAÇÃO DA ÁREA DO TUBO DE CHAMA
# Fluxo de Ar na Zona Secundária
phi_zs = 0.8 #não deve ultrapassar o valor de 0.8 (literatura)
ar_admitido_zs = (razao_rico/phi_zs) - ar_admitido_zp
print("Ar admitido na zs = ",ar_admitido_zs)

# Fluxo de Ar na Zona de Diluição
mrefri_m3 = 0.1*T_3 - 30 #porcentagem de ar reservado para o filme de resfriamento  - Eq 37
ar_admitido_zd = 1 - ar_admitido_zp - ar_admitido_zs - (mrefri_m3/100) #[-] - vazão de ar na zona de diluição - eq 38

print("m_refri/m3 = ",mrefri_m3)
print("m_zd/m3 = ",ar_admitido_zd)

A_ft =  0.56 * aref    
print("Área transversal do tubo de chama = ", A_ft*(10**6),"mm*2")

# DETERMINAÇÃO DA ALTURA DE REFERÊNCIA E ALTURA DO TUBO DE CHAMA
D_int = 0.024                  #Calculado a partir do resultado do Caio...de onde ele tirou esse valor? 
							   #Para combustores tubo anulares e anulares, é considerado que já se saiba Dint
D_ref = (((((4*aref)/np.pi) + (D_int**2))**0.5) - D_int)/2
print("Altura de referência: D_ref = ", D_ref)

D_ft = A_ft/(np.pi*(D_int + D_ref))
print("Altura tubo de chama: D_ft = ", D_ft)

# COMPRIMENTO DE ZONAS
L_zp_min = (2/3) * D_ft   #Comprimento Zona Primária mínimo
L_zp_max = (3/4) * D_ft   #Comprimento Zona Primária máximo

L_zr = 0.5*D_ft       #Comprimento Zona de Recirculação
L_zs = 0.5*D_ft       #Comprimento Zoana Secundária

L_zd = 1.5*D_ft         #Comprimento Zoana de Diluição

L_min = L_zp_min + L_zr + L_zs + L_zd  #Comprimento minimo da câmara de combustão
L_max = L_zp_max + L_zr + L_zs + L_zd  #Comprimento maximo da câmara de combustão

print("L_Zp_min = ", L_zp_min)
print("L_Zp_max = ", L_zp_max)
print("L_zr = ", L_zr)
print("L_zs = ", L_zs)
print("L_zd = ", L_zd)
print("L_min = ", L_min)
print("L_max = ", L_max)

# DETERMINAÇÃO PRELIMINAR DA DISTRIBUIÇÃO DE AR
#TEMPERATURA DOS GASES AO LONGO DO TUBO DE CHAMA

#ZONA DE RECIRCULAÇÃO
#Hipótese: Temperatura constante em toda a região 
Tin_zr = T_3 #Temperatura de Entrada na ZR
n_zr = 0.83 + (0.17*np.tanh(1.5475*0.001*(T_3 + 108*np.log(P_3) - 1863))) #Eficiência na ZR
delta_T = 2185 - 0.5*T_3 #aumento de temperatura desenvolvido pela combustão adiabática da mistura na situação de estequiometria
Tout_zr = T_3 + n_zr*delta_T #Temperatura de Saída na ZR
Tmed_zr = (Tin_zr/3) + (2*Tout_zr/3)
print("Temp saida ZR",Tout_zr)
print("Temp media ZR",Tmed_zr)

## Restante da Zona Primária 
Tin_zp = Tmed_zr
delta_Tzp = 2830 - 800*phi_zp #aproximado para quando T3=400K 
n_zp = 0.92 + 0.12*np.tanh(1.5475*0.001*(T_3 + 108*np.log(P_3) - 1863))
Tout_zp = T_3 + n_zp*delta_Tzp
print("Temp saida ZP",Tout_zp)

##Zona Secudária 
Tin_zs = Tout_zp 
n_zs = 1/phi_zs
delta_Tzs = 1600 - 0.5*T_3
Tout_zs = T_3 + n_zs*delta_Tzs
print("Temp saida ZS",Tout_zs)

##Zona de Diluição
T4 = 1100 #Temperatura na saída da CÂMARA DE COMBUSTÃO
Tin_zd = Tout_zs
Tout_zd = T4
print("Temp saida ZD",Tout_zd)

#Gráfico da Temperatura dos Gases Localmente
#desta forma ele utiliza na interface das regiões o último valor na memória, evitando descontinuidades entre as regiões. 

x_t = np.linspace(1e-4, L_zp_max+L_zs+L_zd, 100)
Tg = np.zeros(len(x_t))
index = 0;

for i in x_t:
	if i >= 0 and i <= L_zr:
		Tg_1 = Tmed_zr
		Tg[index] = Tg_1
	if i > L_zr and i <= L_zp_max:
		Tg_2 = Tmed_zr + ((Tout_zp-Tmed_zr)/(L_zp_max-L_zr))*(i-L_zr)
		Tg[index] = Tg_2
	if i > L_zp_max and i <= L_zp_max+L_zs:
		Tg_3 = Tout_zp + ((Tout_zs - Tout_zp)/L_zs)*(i-L_zp_max)
		Tg[index] = Tg_3
	if i > L_zp_max+L_zs and i <= L_zp_max+L_zs+L_zd:
		Tg_4 = Tout_zs + ((Tout_zd - Tout_zs)/L_zd)*(i - L_zp_max - L_zs)
		Tg[index] = Tg_4
	index = index + 1

plt.figure(2,figsize=(12, 7), dpi=80)
plt.plot(x_t*(10**3), Tg, 'r')
plt.title('Temperatura dos Gases ao Longo do Tubo de Chama')
plt.grid()
plt.vlines(L_zr*1e3,0,2600,colors='b', linestyles='--', label='Limite Zona de Recirculação')
plt.vlines((L_zp_max)*1e3,0,2600,colors='g', linestyles='--', label='Limite Zona Primária')
plt.vlines((L_zp_max+L_zs)*1e3,0,2600,colors='r', linestyles='--', label='Limite Zona Secundária')
plt.vlines((L_zp_max+L_zs+L_zd)*1e3,0,2600,colors='m', linestyles='--', label='Limite Zona de Diluição')
plt.ylabel('Temperatura (K)')
plt.xlabel('Distância da face do tubo de chama (mm)')
plt.yticks(np.arange(0, 2600, 100))
plt.xticks(np.arange(0, 70, 5))
plt.legend()
#plt.show()

#vazão mássica dos gases localmente e vazao mássica anular local 
#Calculo da vazão na interface das regiões

m_zp = ar_admitido_zp*fluxo_massa_3    #[kg]/[s]
m_zs = ar_admitido_zs*fluxo_massa_3    #[kg]/[s]
m_zd = ar_admitido_zd*fluxo_massa_3    #[kg]/[s]

x_t = np.linspace(1e-4, L_zp_max+L_zs+L_zd, 100)
mg = np.zeros(len(x_t))
m_an = np.zeros(len(x_t))
index = 0

for i in x_t:
	if i >= 0 and i <= L_zr:
		mg_zr = (3/4)*m_zp
		mg[index] = mg_zr
		m_an[index] = fluxo_massa_3 - mg_zr 
	if i > L_zr and i <= L_zp_max:
		mg_zp = mg_zr + ((m_zp- mg_zr)*(i - L_zr)/(L_zp_max - L_zr))
		mg[index] = mg_zp
		m_an[index] = fluxo_massa_3 - mg_zp
	if i > L_zp_max and i <= L_zp_max+L_zs:
		mg_zs = mg_zp + ((m_zs - mg_zp)*(i - L_zp_max)/(L_zs))   
		mg[index] = mg_zs
		m_an[index] = fluxo_massa_3 - mg_zs
	if i > L_zp_max+L_zs and i <= L_zp_max+L_zs+L_zd:
		mg_zd = mg_zs + (m_zd-mg_zs)*(i-(L_zp_max+L_zs)/L_zd)
		mg[index] = mg_zd
		m_an[index] = fluxo_massa_3 - mg_zd 
	index = index + 1
  
# plt.figure(3,figsize=(12, 7), dpi=80)
# plt.yticks(np.arange(0, 0.25, 0.01))
# plt.xticks(np.arange(0, 70, 5))
# plt.subplot(1,2,1)
# plt.plot(x_t*(10**3), mg)
# plt.title('Vazão mássica dos gases localmente')
# plt.ylabel('Vazão Mássica (kg/s)')
# plt.xlabel('Distância da face do tubo de chama (mm)')
# plt.yticks(np.arange(0, 0.25, 0.01))
# plt.xticks(np.arange(0, 70, 5))
# plt.grid()
# plt.subplot(1,2,2)
# plt.plot(x_t*(10**3), m_an)
# plt.title('Vazão mássica na região anular localmente')
# plt.ylabel('Vazão mássica (kg/s)')
# plt.xlabel('Distância da face do tubo de chama (mm)')
# plt.tight_layout(1)
# plt.yticks(np.arange(0, 0.25, 0.01))
# plt.xticks(np.arange(0, 70, 5))
# plt.grid()
# #plt.show()

#Posição das Fendas Escolhidas
#Fenda 1
posFenda1= 22*1e-3
x_t = np.linspace(1e-4, L_zp_max+L_zs+L_zd, 100)
id_1 = np.argmin(np.abs(x_t-posFenda1))
vazaoMassicaGases_1 = mg[id_1] 
vazaoMassicaAnular_1 = m_an[id_1]
temperaturaGases_1 = Tg[id_1]

#Posição da Fenda

# Área da Fenda 1
s_1 = 0.001  # altura da fenda [m]
t_1 = 0.002   #espessura da fenda [m]
A_fenda_1 = 2*np.pi*s_1*(D_ref + D_ft)  
A_an = aref-A_ft 
# Vazão Mássica de Ar que Entra em cada Fenda
m_fenda_1 = vazaoMassicaAnular_1*(A_fenda_1/A_an)

index = 0
for i in x_t:
    if i> posFenda1:
        mg[index] = mg[index] + m_fenda_1
        m_an[index] = m_an[index] - m_fenda_1
    index+=1

#Fenda 2
posFenda2= 35*1e-3
id_2 = np.argmin(np.abs(x_t-posFenda2))
vazaoMassicaGases_2 = mg[id_2]
vazaoMassicaAnular_2 = m_an[id_2]
temperaturaGases_2  = Tg[id_2]

# Área da Fenda 2
s_2 = 0.004  # altura da fenda [m]
t_2 = 0.002    #espessura da fenda [m]
A_fenda_2 = 2*np.pi*s_2*(D_ref + D_ft)
# Vazão Mássica de Ar que Entra em cada Fenda
m_fenda_2 = vazaoMassicaAnular_2*(A_fenda_2/A_an)

index = 0
for i in x_t:
    if i> posFenda2:
        mg[index] = mg[index] + m_fenda_2
        m_an[index] = m_an[index] - m_fenda_2
    index+=1

# Eficiência do resfriamento Fenda 1
pu_an_1 = vazaoMassicaAnular_1/A_an # produto entre a densidade e a velocidade do ar que atravessa a área anular
pu_g_1 = vazaoMassicaGases_1/A_ft # produto entre a densidade e velocidade do gás no tubo de chama (na região onde está posicionada a fenda)
visc_ar = (0.03863 + 0.00749*T_3 - (5.8564*(10**(-6))*(T_3**2)) + (2.7769*(10**(-9))*(T_3**3)) - (4.600774*(10**(-13))*(T_3**4)))*(10**(-5)) #viscosidade dinamica do ar
visc_g_1 = (0.03863 + 0.00749*temperaturaGases_1-5.8564*(10**-6)*(temperaturaGases_1**2) + 2.7769*(10**-9)*(temperaturaGases_1**3) - 4.600774*(10**-13)*(temperaturaGases_1**4))*(10**-5) #viscosidade dinamica do gás no interior do tubo de chama
razao_m_1 = pu_an_1/pu_g_1
print(f'Razao m fenda 1: {razao_m_1}')

# Eficiência do resfriamento Fenda 2
pu_an_2 = vazaoMassicaAnular_2/A_an # produto entre a densidade e a velocidade do ar que atravessa a área anular
pu_g_2 = vazaoMassicaGases_2/A_ft # produto entre a densidade e velocidade do gás no tubo de chama (na região onde está posicionada a fenda)
visc_g_2 =(0.03863 + 0.00749*temperaturaGases_2-5.8564*(10**-6)*(temperaturaGases_2**2) + 2.7769*(10**-9)*(temperaturaGases_2**3) - 4.600774*(10**-13)*(temperaturaGases_2**4))*(10**-5) #viscosidade dinamica do gás no interior do tubo de chama
razao_m_2 = pu_an_2/pu_g_2

print(f'Razao m fenda 2: {razao_m_2}')

#Temperatura dos gases proximo da parede

####### Cálculo da Temperatura na Parede ao Longo do Tubo de Chama 
index = 0
vetorTemp = []
graphEff = []

for posX in x_t:
	mdotgas = mg[index] 
	mdotan = m_an[index]
	tgases = Tg[index]

	if posX < posFenda1:
		visc_g =(0.03863 + 0.00749*tgases-5.8564*(10**-6)*(tgases**2) + 2.7769*(10**-9)*(tgases**3) - 4.600774*(10**-13)*(tgases**4))*(10**-5) 
		posXEff = posX
		nr = 0
	elif posX >= posFenda1 and posX < posFenda2:
		visc_g = visc_g_1  	#viscosidade dinamica do gás no interior do tubo de chama
		posXEff = posX
		posRel = posX - posFenda1 + 0.001
		razao_m = razao_m_1

		if razao_m>0.5 and razao_m<=1.3:
			nr = 1.10*(razao_m**0.65)*((visc_ar/visc_g)**0.15)*((posRel/s_1)**(-0.2))*((t_1/s_1)**(-0.2)) 
		elif razao_m>1.3 and razao_m<=4:  #Editei aqui
			nr = 1.28*((visc_ar/visc_g)**0.15)*((posRel/s_1)**(-0.2))*((t_1/s_1)**(-0.2))
		else:
			nr = 0
			print("Favor verificar intervalo.")
	else:
		visc_g = visc_g_2  	#viscosidade dinamica do gás no interior do tubo de chama
		posXEff = posX
		razao_m = razao_m_2
		posRel = posX - posFenda2 + 0.001

		if razao_m>0.5 and razao_m<=1.3:
			nr = 1.10*(razao_m**0.65)*((visc_ar/visc_g)**0.15)*((posRel/s_2)**(-0.2))*((t_2/s_2)**(-0.2)) 
		elif razao_m>1.3 and razao_m<=4:  #Editei aqui
			nr = 1.28*((visc_ar/visc_g)**0.15)*((posRel/s_2)**(-0.2))*((t_2/s_2)**(-0.2))
		else:
			nr = 0
			print("Favor verificar intervalo.")

	graphEff.append(nr)
	Tg_w = tgases - nr*(tgases-T_3)

	#TRANSFERENCIA DE CALOR NA PAREDE
	#Resolução será feita utilizando a biblioteca Sympy do Python
	# RADIAÇÃO
	#T_w1 Temperatura na superficie interna tubo de chama
	#T_w2 Temperatura na superficie externa tubo de chama
	T_w1, T_w2 = symbols('T_w1,T_w2')

	k_w = 26 #[W/m.K] condutividade térmica - página 79
	t_w = 0.0005 #liner wall thickness m - retirado do GasTurb pag 325 VALIDAR ESSE VALOR (atualizado do desenho do TG)
	sigma = 5.67*10**(-8)   #constante de Stefan-Boltzmann
	e_w = 0.4 #emissividade do material - página 79 
	q = 0.00398/0.243 #VERIFICAR COM O PROFESSOR????
	l_b_int = D_ft   #comprimento característico do gás - interno
	l_b_ext = 1.2*D_ft #comprimento característico do gás - externo
	e_g_int = 1 - np.exp(-0.290*P_3*(q*l_b_int)**0.5*tgases**(-1.5)) #emissividade do gás 
	e_g_ext = 1 - np.exp(-0.290*P_3*(q*l_b_ext)**0.5*tgases**(-1.5)) #emissividade do gás 
	Z = 0.4 #para alumínio - página 66 do TG

	#fluxo de calor por radiação do gás (devo usar e_g_int ou e_g_ext)
	R_1 = 0.5*sigma*(1+e_w)*e_g_int*(tgases**1.5)*((tgases**2.5)-(T_w1**2.5)) 
	R_2 = Z*sigma*(T_w2**4 - T_3**4)  #fluxo de calor por radiação da parede do tubo de chama         

	#O fluxo de calor através da parede K1-2 é dado por:
	K_1_2 = (k_w/t_w)*(T_w1 - T_w2) #Fluxo de calor através da parede

	#CONVECÇÃO
	#condutividade térmica do gás, função de sua temperatura
	k_g = 5.92657*10**(-4)+9.80957*(10**(-5))*tgases-4.89398*(10**(-8))*(tgases**2)+1.5011410*(10**(-11))*(tgases**3)
	#Número de Reynolds na posição x
	Re_x = (mdotgas*posXEff)/(A_ft*visc_g)  

	if posX <= posFenda1:
		D_L = 4*A_ft/D_ref
		C_1 = 0.017*(k_g/(D_L**0.2))*((mdotgas/(A_ft*visc_g))**0.8)*(tgases-T_w1)
	elif posX >= posFenda1 and posX < posFenda2:
		if razao_m > 0.5 and razao_m <= 1.3:
			C_1 = 0.069*(k_g/posXEff)*(Re_x**0.7)*(Tg_w-T_w1)
		elif razao_m > 1.3 and razao_m < 4.0:
			#Essa equação estava errada no trabalho do rapaz.
			C_1 = 0.10*(k_g/posXEff)*Re_x**0.8*(posXEff/s_1)**(-0.36)*(Tg_w-T_w1)
	else:
		if razao_m > 0.5 and razao_m <= 1.3:
			C_1 = 0.069*(k_g/posXEff)*(Re_x**0.7)*(Tg_w-T_w1)
		elif razao_m > 1.3 and razao_m < 4.0:
			#Essa equação estava errada no trabalho do rapaz.
			C_1 = 0.10*(k_g/posXEff)*Re_x**0.8*(posXEff/s_2)**(-0.36)*(Tg_w-T_w1)
		
	D_an = D_ref - D_ft
	k_a = 5.92657*(10**(-4))+9.80957*(10**(-5))*T_3-4.89398*(10**(-8))*(T_3**2)+1.5011410*(10**(-11))*(T_3**3) 
	#fluxo de calor por convecção da parede externa do tubo de chama
	C_2 = 0.020*(k_a/(D_an**0.2))*((mdotan/(A_an*visc_ar))**0.8)*(T_w2 - T_3) 

	eq1 = Eq(R_1+C_1-R_2-C_2,0)
	eq2 = Eq(R_1+C_1-K_1_2,0)
	sol = nsolve((eq1,eq2),(T_w1, T_w2),(1500,800))
	tfinal = min(sol[0],sol[1])
	vetorTemp.append(tfinal)
	print(rf"For iteration {index} the solution is T_w1 = {round(sol[0],2):,.2f}, T_w2 = {round(sol[1],2):,.2f}")
	index+=1

plt.figure(4,figsize=(12, 7), dpi=80)
plt.plot(x_t*(10**3),vetorTemp,'b',label = 'Temperatura máxima na superfície do tubo de chama.')
plt.plot(x_t*(10**3), Tg, 'r', label = 'Temperatura dos gases no tubo de chama.')

plt.vlines(posFenda1*1e3,0,2600,colors='k', linestyles='-.', label='Posição da Fenda 1')
plt.vlines(posFenda2*1e3,0,2600,colors='y', linestyles='-.', label='Posição da Fenda 2')

plt.vlines(L_zr*1e3,0,2600,colors='b', linestyles='--', label='Limite Zona de Recirculação')
plt.vlines((L_zp_max)*1e3,0,2600,colors='g', linestyles='--', label='Limite Zona Primária')
plt.vlines((L_zp_max+L_zs)*1e3,0,2600,colors='r', linestyles='--', label='Limite Zona Secundária')
plt.vlines((L_zp_max+L_zs+L_zd)*1e3,0,2600,colors='m', linestyles='--', label='Limite Zona de Diluição')

plt.yticks(np.arange(0, 2600, 100))
plt.xticks(np.arange(0, 70, 5))
plt.hlines(950,0,65,linestyles='-.', label='Limite do Material')
plt.legend()
plt.title('Temperatura dos Gases e das Paredes ao Longo do Tubo de Chama')
plt.ylabel('Temperatura (K)')
plt.xlabel('Distância em relação a face (mm)')
plt.grid()
plt.show()

plt.figure(5,figsize=(12, 7), dpi=80)
plt.plot(x_t*(10**3),graphEff,'b',label = 'Eficiência de Resfriamento')
plt.vlines(posFenda1*1e3,0,1,colors='k', linestyles='-.', label='Posição da Fenda 1')
plt.vlines(posFenda2*1e3,0,1,colors='y', linestyles='-.', label='Posição da Fenda 2')
plt.title('Eficiência do Resfriamento ao Longo da Parede do Tubo de Chama')
plt.ylabel('Eficiência')
plt.xlabel('Distância em relação a face (mm)')
plt.yticks(np.arange(0, 1.01,0.05))
plt.xticks(np.arange(0, 70, 5))
plt.grid()
plt.legend()
plt.show()

Nfendas1 = 20 #Definido pelo projetista (interna+externa)
Nfendas2 = 20 #Definido pelo projetista (interna+externa)
perda_pressao_escoamento = 0.06 #Fornecido no TG
Cd = 0.61 #Coeficiente de Descarga 

Ah_fenda1 = ((143.5*(m_fenda_1**2)*T_3)/((P_3**2)*(Cd**2)*(perda_pressao_escoamento)))**0.5
Ah_fenda2 = ((143.5*(m_fenda_2**2)*T_3)/((P_3**2)*(Cd**2)*(perda_pressao_escoamento)))**0.5 

dh_fenda1 = 2*((Ah_fenda1/(np.pi*Nfendas1))**0.5)
dh_fenda2 = 2*((Ah_fenda2/(np.pi*Nfendas2))**0.5)

print(f'Primeira linha de fendas: foram posicionadas {Nfendas1} fendas com diâmetro de {dh_fenda1*1e3} mm na posição {posFenda1*1e3} mm')
print(f'Segunda linha de fendas: Foram posicionadas {Nfendas2} fendas com diâmetro de {dh_fenda2*1e3} mm na posição {posFenda2*1e3} mm')

Nfendas1 = 20 #Definido pelo projetista (interna+externa)
Nfendas2 = 30 #Definido pelo projetista (interna+externa)
perda_pressao_escoamento = 0.06 #Fornecido no TG
Cd = 0.61 #Coeficiente de Descarga

Ah_fenda1 = ((143.5*(m_fenda_1**2)*T_3)/((P_3**2)*(Cd**2)*(perda_pressao_escoamento)))**0.5
Ah_fenda2 = ((143.5*(m_fenda_2**2)*T_3)/((P_3**2)*(Cd**2)*(perda_pressao_escoamento)))**0.5 

dh_fenda1 = 2*((Ah_fenda1/(np.pi*Nfendas1))**0.5)
dh_fenda2 = 2*((Ah_fenda2/(np.pi*Nfendas2))**0.5)

print(f'Primeira linha de fendas: foram posicionadas {Nfendas1} fendas com diâmetro de {dh_fenda1*1e3} mm na posição {posFenda1*1e3} mm')
print(f'Segunda linha de fendas: Foram posicionadas {Nfendas2} fendas com diâmetro de {dh_fenda2*1e3} mm na posição {posFenda2*1e3} mm')

plt.figure(5,figsize=(12, 7), dpi=80)
plt.plot(x_t*(10**3),m_an,'b',label = 'Vazão mássica anular')
plt.title('Vazão Mássica Anular ao Longo do Tubo de Chama')
plt.ylabel('Vazão Mássica (kg/s)')
plt.xlabel('Distância da face do tubo de chama (mm)')
plt.yticks(np.arange(0, 0.25, 0.01))
plt.xticks(np.arange(0, 70, 5))
plt.grid()
plt.legend()
#plt.show()



plt.xticks(np.arange(0, 70, 5))
plt.plot(x_t*(10**3), mg+m_an)
plt.ylabel('Vazão Mássica (kg/s)')
plt.xlabel('Distância da face do tubo de chama (mm)')
plt.grid()